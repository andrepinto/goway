// Code generated by protoc-gen-go.
// source: domain/models.proto
// DO NOT EDIT!

/*
Package domain is a generated protocol buffer package.

It is generated from these files:
	domain/models.proto

It has these top-level messages:
	VersionRequest
	VersionResponse
	DeleteResponse
	ProductsRequest
	ProductRequest
	ProductUpdateRequest
	ProductCreateRequest
	ProductCreateRouteRequest
	ProductResponse
	ProductsResponse
	ProductV1
	ClientsRequest
	ClientRequest
	ClientUpdateRequest
	ClientCreateRequest
	ClientCreateRouteRequest
	ClientCreateInjectRequest
	ClientResponse
	ClientsResponse
	ClientV1
	RoutesRequest
	RouteRequest
	RouteUpdateRequest
	RouteCreateInjectRequest
	RouteResponse
	RoutesResponse
	RoutesV1
	InjectsRequest
	InjectRequest
	InjectUpdateRequest
	InjectResponse
	InjectsResponse
	InjectDataV1
*/
package domain

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type VersionRequest struct {
}

func (m *VersionRequest) Reset()                    { *m = VersionRequest{} }
func (m *VersionRequest) String() string            { return proto.CompactTextString(m) }
func (*VersionRequest) ProtoMessage()               {}
func (*VersionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type VersionResponse struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *VersionResponse) Reset()                    { *m = VersionResponse{} }
func (m *VersionResponse) String() string            { return proto.CompactTextString(m) }
func (*VersionResponse) ProtoMessage()               {}
func (*VersionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *VersionResponse) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type DeleteResponse struct {
	Value bool `protobuf:"varint,1,opt,name=value" json:"value,omitempty"`
}

func (m *DeleteResponse) Reset()                    { *m = DeleteResponse{} }
func (m *DeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteResponse) ProtoMessage()               {}
func (*DeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *DeleteResponse) GetValue() bool {
	if m != nil {
		return m.Value
	}
	return false
}

type ProductsRequest struct {
}

func (m *ProductsRequest) Reset()                    { *m = ProductsRequest{} }
func (m *ProductsRequest) String() string            { return proto.CompactTextString(m) }
func (*ProductsRequest) ProtoMessage()               {}
func (*ProductsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type ProductRequest struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *ProductRequest) Reset()                    { *m = ProductRequest{} }
func (m *ProductRequest) String() string            { return proto.CompactTextString(m) }
func (*ProductRequest) ProtoMessage()               {}
func (*ProductRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ProductRequest) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type ProductUpdateRequest struct {
	Id      string     `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Product *ProductV1 `protobuf:"bytes,2,opt,name=product" json:"product,omitempty"`
}

func (m *ProductUpdateRequest) Reset()                    { *m = ProductUpdateRequest{} }
func (m *ProductUpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*ProductUpdateRequest) ProtoMessage()               {}
func (*ProductUpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ProductUpdateRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ProductUpdateRequest) GetProduct() *ProductV1 {
	if m != nil {
		return m.Product
	}
	return nil
}

type ProductCreateRequest struct {
	Product *ProductV1 `protobuf:"bytes,1,opt,name=product" json:"product,omitempty"`
}

func (m *ProductCreateRequest) Reset()                    { *m = ProductCreateRequest{} }
func (m *ProductCreateRequest) String() string            { return proto.CompactTextString(m) }
func (*ProductCreateRequest) ProtoMessage()               {}
func (*ProductCreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ProductCreateRequest) GetProduct() *ProductV1 {
	if m != nil {
		return m.Product
	}
	return nil
}

type ProductCreateRouteRequest struct {
	Id    string    `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Route *RoutesV1 `protobuf:"bytes,2,opt,name=route" json:"route,omitempty"`
}

func (m *ProductCreateRouteRequest) Reset()                    { *m = ProductCreateRouteRequest{} }
func (m *ProductCreateRouteRequest) String() string            { return proto.CompactTextString(m) }
func (*ProductCreateRouteRequest) ProtoMessage()               {}
func (*ProductCreateRouteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ProductCreateRouteRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ProductCreateRouteRequest) GetRoute() *RoutesV1 {
	if m != nil {
		return m.Route
	}
	return nil
}

type ProductResponse struct {
	Result *ProductV1 `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *ProductResponse) Reset()                    { *m = ProductResponse{} }
func (m *ProductResponse) String() string            { return proto.CompactTextString(m) }
func (*ProductResponse) ProtoMessage()               {}
func (*ProductResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ProductResponse) GetResult() *ProductV1 {
	if m != nil {
		return m.Result
	}
	return nil
}

type ProductsResponse struct {
	Result []*ProductV1 `protobuf:"bytes,1,rep,name=result" json:"result,omitempty"`
}

func (m *ProductsResponse) Reset()                    { *m = ProductsResponse{} }
func (m *ProductsResponse) String() string            { return proto.CompactTextString(m) }
func (*ProductsResponse) ProtoMessage()               {}
func (*ProductsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ProductsResponse) GetResult() []*ProductV1 {
	if m != nil {
		return m.Result
	}
	return nil
}

type ProductV1 struct {
	Id      string      `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Code    string      `protobuf:"bytes,2,opt,name=code" json:"code,omitempty"`
	Name    string      `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Version string      `protobuf:"bytes,4,opt,name=version" json:"version,omitempty"`
	Routes  []*RoutesV1 `protobuf:"bytes,5,rep,name=routes" json:"routes,omitempty"`
}

func (m *ProductV1) Reset()                    { *m = ProductV1{} }
func (m *ProductV1) String() string            { return proto.CompactTextString(m) }
func (*ProductV1) ProtoMessage()               {}
func (*ProductV1) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *ProductV1) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ProductV1) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *ProductV1) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ProductV1) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *ProductV1) GetRoutes() []*RoutesV1 {
	if m != nil {
		return m.Routes
	}
	return nil
}

type ClientsRequest struct {
}

func (m *ClientsRequest) Reset()                    { *m = ClientsRequest{} }
func (m *ClientsRequest) String() string            { return proto.CompactTextString(m) }
func (*ClientsRequest) ProtoMessage()               {}
func (*ClientsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

type ClientRequest struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *ClientRequest) Reset()                    { *m = ClientRequest{} }
func (m *ClientRequest) String() string            { return proto.CompactTextString(m) }
func (*ClientRequest) ProtoMessage()               {}
func (*ClientRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *ClientRequest) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type ClientUpdateRequest struct {
	Id     string    `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Client *ClientV1 `protobuf:"bytes,2,opt,name=client" json:"client,omitempty"`
}

func (m *ClientUpdateRequest) Reset()                    { *m = ClientUpdateRequest{} }
func (m *ClientUpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*ClientUpdateRequest) ProtoMessage()               {}
func (*ClientUpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *ClientUpdateRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ClientUpdateRequest) GetClient() *ClientV1 {
	if m != nil {
		return m.Client
	}
	return nil
}

type ClientCreateRequest struct {
	Client *ClientV1 `protobuf:"bytes,1,opt,name=client" json:"client,omitempty"`
}

func (m *ClientCreateRequest) Reset()                    { *m = ClientCreateRequest{} }
func (m *ClientCreateRequest) String() string            { return proto.CompactTextString(m) }
func (*ClientCreateRequest) ProtoMessage()               {}
func (*ClientCreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *ClientCreateRequest) GetClient() *ClientV1 {
	if m != nil {
		return m.Client
	}
	return nil
}

type ClientCreateRouteRequest struct {
	Id    string    `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Route *RoutesV1 `protobuf:"bytes,2,opt,name=route" json:"route,omitempty"`
}

func (m *ClientCreateRouteRequest) Reset()                    { *m = ClientCreateRouteRequest{} }
func (m *ClientCreateRouteRequest) String() string            { return proto.CompactTextString(m) }
func (*ClientCreateRouteRequest) ProtoMessage()               {}
func (*ClientCreateRouteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *ClientCreateRouteRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ClientCreateRouteRequest) GetRoute() *RoutesV1 {
	if m != nil {
		return m.Route
	}
	return nil
}

type ClientCreateInjectRequest struct {
	Id     string        `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Inject *InjectDataV1 `protobuf:"bytes,2,opt,name=inject" json:"inject,omitempty"`
}

func (m *ClientCreateInjectRequest) Reset()                    { *m = ClientCreateInjectRequest{} }
func (m *ClientCreateInjectRequest) String() string            { return proto.CompactTextString(m) }
func (*ClientCreateInjectRequest) ProtoMessage()               {}
func (*ClientCreateInjectRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *ClientCreateInjectRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ClientCreateInjectRequest) GetInject() *InjectDataV1 {
	if m != nil {
		return m.Inject
	}
	return nil
}

type ClientResponse struct {
	Result *ClientV1 `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *ClientResponse) Reset()                    { *m = ClientResponse{} }
func (m *ClientResponse) String() string            { return proto.CompactTextString(m) }
func (*ClientResponse) ProtoMessage()               {}
func (*ClientResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *ClientResponse) GetResult() *ClientV1 {
	if m != nil {
		return m.Result
	}
	return nil
}

type ClientsResponse struct {
	Result []*ClientV1 `protobuf:"bytes,1,rep,name=result" json:"result,omitempty"`
}

func (m *ClientsResponse) Reset()                    { *m = ClientsResponse{} }
func (m *ClientsResponse) String() string            { return proto.CompactTextString(m) }
func (*ClientsResponse) ProtoMessage()               {}
func (*ClientsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *ClientsResponse) GetResult() []*ClientV1 {
	if m != nil {
		return m.Result
	}
	return nil
}

type ClientV1 struct {
	Id               string          `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Code             string          `protobuf:"bytes,2,opt,name=code" json:"code,omitempty"`
	ApiPath          string          `protobuf:"bytes,3,opt,name=apiPath" json:"apiPath,omitempty"`
	Product          string          `protobuf:"bytes,4,opt,name=product" json:"product,omitempty"`
	ProductVersion   string          `protobuf:"bytes,5,opt,name=productVersion" json:"productVersion,omitempty"`
	Client           string          `protobuf:"bytes,6,opt,name=client" json:"client,omitempty"`
	RemoveApiPath    bool            `protobuf:"varint,7,opt,name=removeApiPath" json:"removeApiPath,omitempty"`
	Version          string          `protobuf:"bytes,8,opt,name=version" json:"version,omitempty"`
	GlobalInjectData []*InjectDataV1 `protobuf:"bytes,9,rep,name=globalInjectData" json:"globalInjectData,omitempty"`
	Routes           []*RoutesV1     `protobuf:"bytes,10,rep,name=routes" json:"routes,omitempty"`
}

func (m *ClientV1) Reset()                    { *m = ClientV1{} }
func (m *ClientV1) String() string            { return proto.CompactTextString(m) }
func (*ClientV1) ProtoMessage()               {}
func (*ClientV1) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *ClientV1) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ClientV1) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *ClientV1) GetApiPath() string {
	if m != nil {
		return m.ApiPath
	}
	return ""
}

func (m *ClientV1) GetProduct() string {
	if m != nil {
		return m.Product
	}
	return ""
}

func (m *ClientV1) GetProductVersion() string {
	if m != nil {
		return m.ProductVersion
	}
	return ""
}

func (m *ClientV1) GetClient() string {
	if m != nil {
		return m.Client
	}
	return ""
}

func (m *ClientV1) GetRemoveApiPath() bool {
	if m != nil {
		return m.RemoveApiPath
	}
	return false
}

func (m *ClientV1) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *ClientV1) GetGlobalInjectData() []*InjectDataV1 {
	if m != nil {
		return m.GlobalInjectData
	}
	return nil
}

func (m *ClientV1) GetRoutes() []*RoutesV1 {
	if m != nil {
		return m.Routes
	}
	return nil
}

type RoutesRequest struct {
}

func (m *RoutesRequest) Reset()                    { *m = RoutesRequest{} }
func (m *RoutesRequest) String() string            { return proto.CompactTextString(m) }
func (*RoutesRequest) ProtoMessage()               {}
func (*RoutesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

type RouteRequest struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *RouteRequest) Reset()                    { *m = RouteRequest{} }
func (m *RouteRequest) String() string            { return proto.CompactTextString(m) }
func (*RouteRequest) ProtoMessage()               {}
func (*RouteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *RouteRequest) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type RouteUpdateRequest struct {
	Id    string    `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Route *RoutesV1 `protobuf:"bytes,2,opt,name=route" json:"route,omitempty"`
}

func (m *RouteUpdateRequest) Reset()                    { *m = RouteUpdateRequest{} }
func (m *RouteUpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*RouteUpdateRequest) ProtoMessage()               {}
func (*RouteUpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *RouteUpdateRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RouteUpdateRequest) GetRoute() *RoutesV1 {
	if m != nil {
		return m.Route
	}
	return nil
}

type RouteCreateInjectRequest struct {
	Id     string        `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Inject *InjectDataV1 `protobuf:"bytes,2,opt,name=inject" json:"inject,omitempty"`
}

func (m *RouteCreateInjectRequest) Reset()                    { *m = RouteCreateInjectRequest{} }
func (m *RouteCreateInjectRequest) String() string            { return proto.CompactTextString(m) }
func (*RouteCreateInjectRequest) ProtoMessage()               {}
func (*RouteCreateInjectRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *RouteCreateInjectRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RouteCreateInjectRequest) GetInject() *InjectDataV1 {
	if m != nil {
		return m.Inject
	}
	return nil
}

type RouteResponse struct {
	Result *RoutesV1 `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *RouteResponse) Reset()                    { *m = RouteResponse{} }
func (m *RouteResponse) String() string            { return proto.CompactTextString(m) }
func (*RouteResponse) ProtoMessage()               {}
func (*RouteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *RouteResponse) GetResult() *RoutesV1 {
	if m != nil {
		return m.Result
	}
	return nil
}

type RoutesResponse struct {
	Result []*RoutesV1 `protobuf:"bytes,1,rep,name=result" json:"result,omitempty"`
}

func (m *RoutesResponse) Reset()                    { *m = RoutesResponse{} }
func (m *RoutesResponse) String() string            { return proto.CompactTextString(m) }
func (*RoutesResponse) ProtoMessage()               {}
func (*RoutesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *RoutesResponse) GetResult() []*RoutesV1 {
	if m != nil {
		return m.Result
	}
	return nil
}

type RoutesV1 struct {
	Id               string          `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Code             string          `protobuf:"bytes,2,opt,name=code" json:"code,omitempty"`
	Verb             string          `protobuf:"bytes,3,opt,name=verb" json:"verb,omitempty"`
	ListenPath       string          `protobuf:"bytes,4,opt,name=listenPath" json:"listenPath,omitempty"`
	ServiceName      string          `protobuf:"bytes,5,opt,name=serviceName" json:"serviceName,omitempty"`
	Handlers         []string        `protobuf:"bytes,6,rep,name=handlers" json:"handlers,omitempty"`
	Roles            []string        `protobuf:"bytes,7,rep,name=roles" json:"roles,omitempty"`
	Tags             []string        `protobuf:"bytes,8,rep,name=tags" json:"tags,omitempty"`
	InjectData       []*InjectDataV1 `protobuf:"bytes,9,rep,name=injectData" json:"injectData,omitempty"`
	InjectGlobalData bool            `protobuf:"varint,10,opt,name=injectGlobalData" json:"injectGlobalData,omitempty"`
	Asset            string          `protobuf:"bytes,11,opt,name=asset" json:"asset,omitempty"`
	AssetId          string          `protobuf:"bytes,12,opt,name=assetId" json:"assetId,omitempty"`
	Alias            string          `protobuf:"bytes,13,opt,name=alias" json:"alias,omitempty"`
}

func (m *RoutesV1) Reset()                    { *m = RoutesV1{} }
func (m *RoutesV1) String() string            { return proto.CompactTextString(m) }
func (*RoutesV1) ProtoMessage()               {}
func (*RoutesV1) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *RoutesV1) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RoutesV1) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *RoutesV1) GetVerb() string {
	if m != nil {
		return m.Verb
	}
	return ""
}

func (m *RoutesV1) GetListenPath() string {
	if m != nil {
		return m.ListenPath
	}
	return ""
}

func (m *RoutesV1) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *RoutesV1) GetHandlers() []string {
	if m != nil {
		return m.Handlers
	}
	return nil
}

func (m *RoutesV1) GetRoles() []string {
	if m != nil {
		return m.Roles
	}
	return nil
}

func (m *RoutesV1) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *RoutesV1) GetInjectData() []*InjectDataV1 {
	if m != nil {
		return m.InjectData
	}
	return nil
}

func (m *RoutesV1) GetInjectGlobalData() bool {
	if m != nil {
		return m.InjectGlobalData
	}
	return false
}

func (m *RoutesV1) GetAsset() string {
	if m != nil {
		return m.Asset
	}
	return ""
}

func (m *RoutesV1) GetAssetId() string {
	if m != nil {
		return m.AssetId
	}
	return ""
}

func (m *RoutesV1) GetAlias() string {
	if m != nil {
		return m.Alias
	}
	return ""
}

type InjectsRequest struct {
}

func (m *InjectsRequest) Reset()                    { *m = InjectsRequest{} }
func (m *InjectsRequest) String() string            { return proto.CompactTextString(m) }
func (*InjectsRequest) ProtoMessage()               {}
func (*InjectsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

type InjectRequest struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *InjectRequest) Reset()                    { *m = InjectRequest{} }
func (m *InjectRequest) String() string            { return proto.CompactTextString(m) }
func (*InjectRequest) ProtoMessage()               {}
func (*InjectRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *InjectRequest) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type InjectUpdateRequest struct {
	Id     string        `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Inject *InjectDataV1 `protobuf:"bytes,2,opt,name=inject" json:"inject,omitempty"`
}

func (m *InjectUpdateRequest) Reset()                    { *m = InjectUpdateRequest{} }
func (m *InjectUpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*InjectUpdateRequest) ProtoMessage()               {}
func (*InjectUpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *InjectUpdateRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *InjectUpdateRequest) GetInject() *InjectDataV1 {
	if m != nil {
		return m.Inject
	}
	return nil
}

type InjectResponse struct {
	Result *InjectDataV1 `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *InjectResponse) Reset()                    { *m = InjectResponse{} }
func (m *InjectResponse) String() string            { return proto.CompactTextString(m) }
func (*InjectResponse) ProtoMessage()               {}
func (*InjectResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *InjectResponse) GetResult() *InjectDataV1 {
	if m != nil {
		return m.Result
	}
	return nil
}

type InjectsResponse struct {
	Result []*InjectDataV1 `protobuf:"bytes,1,rep,name=result" json:"result,omitempty"`
}

func (m *InjectsResponse) Reset()                    { *m = InjectsResponse{} }
func (m *InjectsResponse) String() string            { return proto.CompactTextString(m) }
func (*InjectsResponse) ProtoMessage()               {}
func (*InjectsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *InjectsResponse) GetResult() []*InjectDataV1 {
	if m != nil {
		return m.Result
	}
	return nil
}

type InjectDataV1 struct {
	Id    string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Code  string `protobuf:"bytes,2,opt,name=code" json:"code,omitempty"`
	Value string `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
	Where string `protobuf:"bytes,4,opt,name=where" json:"where,omitempty"`
	Order int32  `protobuf:"varint,5,opt,name=order" json:"order,omitempty"`
}

func (m *InjectDataV1) Reset()                    { *m = InjectDataV1{} }
func (m *InjectDataV1) String() string            { return proto.CompactTextString(m) }
func (*InjectDataV1) ProtoMessage()               {}
func (*InjectDataV1) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *InjectDataV1) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *InjectDataV1) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *InjectDataV1) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *InjectDataV1) GetWhere() string {
	if m != nil {
		return m.Where
	}
	return ""
}

func (m *InjectDataV1) GetOrder() int32 {
	if m != nil {
		return m.Order
	}
	return 0
}

func init() {
	proto.RegisterType((*VersionRequest)(nil), "domain.VersionRequest")
	proto.RegisterType((*VersionResponse)(nil), "domain.VersionResponse")
	proto.RegisterType((*DeleteResponse)(nil), "domain.DeleteResponse")
	proto.RegisterType((*ProductsRequest)(nil), "domain.ProductsRequest")
	proto.RegisterType((*ProductRequest)(nil), "domain.ProductRequest")
	proto.RegisterType((*ProductUpdateRequest)(nil), "domain.ProductUpdateRequest")
	proto.RegisterType((*ProductCreateRequest)(nil), "domain.ProductCreateRequest")
	proto.RegisterType((*ProductCreateRouteRequest)(nil), "domain.ProductCreateRouteRequest")
	proto.RegisterType((*ProductResponse)(nil), "domain.ProductResponse")
	proto.RegisterType((*ProductsResponse)(nil), "domain.ProductsResponse")
	proto.RegisterType((*ProductV1)(nil), "domain.Product_v1")
	proto.RegisterType((*ClientsRequest)(nil), "domain.ClientsRequest")
	proto.RegisterType((*ClientRequest)(nil), "domain.ClientRequest")
	proto.RegisterType((*ClientUpdateRequest)(nil), "domain.ClientUpdateRequest")
	proto.RegisterType((*ClientCreateRequest)(nil), "domain.ClientCreateRequest")
	proto.RegisterType((*ClientCreateRouteRequest)(nil), "domain.ClientCreateRouteRequest")
	proto.RegisterType((*ClientCreateInjectRequest)(nil), "domain.ClientCreateInjectRequest")
	proto.RegisterType((*ClientResponse)(nil), "domain.ClientResponse")
	proto.RegisterType((*ClientsResponse)(nil), "domain.ClientsResponse")
	proto.RegisterType((*ClientV1)(nil), "domain.Client_v1")
	proto.RegisterType((*RoutesRequest)(nil), "domain.RoutesRequest")
	proto.RegisterType((*RouteRequest)(nil), "domain.RouteRequest")
	proto.RegisterType((*RouteUpdateRequest)(nil), "domain.RouteUpdateRequest")
	proto.RegisterType((*RouteCreateInjectRequest)(nil), "domain.RouteCreateInjectRequest")
	proto.RegisterType((*RouteResponse)(nil), "domain.RouteResponse")
	proto.RegisterType((*RoutesResponse)(nil), "domain.RoutesResponse")
	proto.RegisterType((*RoutesV1)(nil), "domain.Routes_v1")
	proto.RegisterType((*InjectsRequest)(nil), "domain.InjectsRequest")
	proto.RegisterType((*InjectRequest)(nil), "domain.InjectRequest")
	proto.RegisterType((*InjectUpdateRequest)(nil), "domain.InjectUpdateRequest")
	proto.RegisterType((*InjectResponse)(nil), "domain.InjectResponse")
	proto.RegisterType((*InjectsResponse)(nil), "domain.InjectsResponse")
	proto.RegisterType((*InjectDataV1)(nil), "domain.InjectData_v1")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Goway service

type GowayClient interface {
	Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error)
	GetProducts(ctx context.Context, in *ProductsRequest, opts ...grpc.CallOption) (*ProductsResponse, error)
	GetProduct(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*ProductResponse, error)
	GetProductByCode(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*ProductResponse, error)
	UpdateProduct(ctx context.Context, in *ProductUpdateRequest, opts ...grpc.CallOption) (*ProductResponse, error)
	DeleteProduct(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	CreateProduct(ctx context.Context, in *ProductCreateRequest, opts ...grpc.CallOption) (*ProductResponse, error)
	CreateProductRoute(ctx context.Context, in *ProductCreateRouteRequest, opts ...grpc.CallOption) (*RouteResponse, error)
	GetClients(ctx context.Context, in *ClientsRequest, opts ...grpc.CallOption) (*ClientsResponse, error)
	GetClient(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*ClientResponse, error)
	GetClientByCode(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*ClientResponse, error)
	UpdateClient(ctx context.Context, in *ClientUpdateRequest, opts ...grpc.CallOption) (*ClientResponse, error)
	DeleteClient(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	CreateClient(ctx context.Context, in *ClientCreateRequest, opts ...grpc.CallOption) (*ClientResponse, error)
	CreateClientRoute(ctx context.Context, in *ClientCreateRouteRequest, opts ...grpc.CallOption) (*RouteResponse, error)
	CreateClientInject(ctx context.Context, in *ClientCreateInjectRequest, opts ...grpc.CallOption) (*InjectResponse, error)
	GetRoutes(ctx context.Context, in *RoutesRequest, opts ...grpc.CallOption) (*RoutesResponse, error)
	GetRoute(ctx context.Context, in *RouteRequest, opts ...grpc.CallOption) (*RouteResponse, error)
	GetRouteByCode(ctx context.Context, in *RouteRequest, opts ...grpc.CallOption) (*RouteResponse, error)
	UpdateRoute(ctx context.Context, in *RouteUpdateRequest, opts ...grpc.CallOption) (*RouteResponse, error)
	DeleteRoute(ctx context.Context, in *RouteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	CreateRouteInject(ctx context.Context, in *RouteCreateInjectRequest, opts ...grpc.CallOption) (*InjectResponse, error)
	GetInjects(ctx context.Context, in *InjectsRequest, opts ...grpc.CallOption) (*InjectsResponse, error)
	GetInject(ctx context.Context, in *InjectRequest, opts ...grpc.CallOption) (*InjectResponse, error)
	GetInjectByCode(ctx context.Context, in *InjectRequest, opts ...grpc.CallOption) (*InjectResponse, error)
	UpdateInject(ctx context.Context, in *InjectUpdateRequest, opts ...grpc.CallOption) (*InjectResponse, error)
	DeleteInject(ctx context.Context, in *InjectRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
}

type gowayClient struct {
	cc *grpc.ClientConn
}

func NewGowayClient(cc *grpc.ClientConn) GowayClient {
	return &gowayClient{cc}
}

func (c *gowayClient) Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error) {
	out := new(VersionResponse)
	err := grpc.Invoke(ctx, "/domain.Goway/Version", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gowayClient) GetProducts(ctx context.Context, in *ProductsRequest, opts ...grpc.CallOption) (*ProductsResponse, error) {
	out := new(ProductsResponse)
	err := grpc.Invoke(ctx, "/domain.Goway/GetProducts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gowayClient) GetProduct(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*ProductResponse, error) {
	out := new(ProductResponse)
	err := grpc.Invoke(ctx, "/domain.Goway/GetProduct", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gowayClient) GetProductByCode(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*ProductResponse, error) {
	out := new(ProductResponse)
	err := grpc.Invoke(ctx, "/domain.Goway/GetProductByCode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gowayClient) UpdateProduct(ctx context.Context, in *ProductUpdateRequest, opts ...grpc.CallOption) (*ProductResponse, error) {
	out := new(ProductResponse)
	err := grpc.Invoke(ctx, "/domain.Goway/UpdateProduct", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gowayClient) DeleteProduct(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := grpc.Invoke(ctx, "/domain.Goway/DeleteProduct", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gowayClient) CreateProduct(ctx context.Context, in *ProductCreateRequest, opts ...grpc.CallOption) (*ProductResponse, error) {
	out := new(ProductResponse)
	err := grpc.Invoke(ctx, "/domain.Goway/CreateProduct", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gowayClient) CreateProductRoute(ctx context.Context, in *ProductCreateRouteRequest, opts ...grpc.CallOption) (*RouteResponse, error) {
	out := new(RouteResponse)
	err := grpc.Invoke(ctx, "/domain.Goway/CreateProductRoute", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gowayClient) GetClients(ctx context.Context, in *ClientsRequest, opts ...grpc.CallOption) (*ClientsResponse, error) {
	out := new(ClientsResponse)
	err := grpc.Invoke(ctx, "/domain.Goway/GetClients", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gowayClient) GetClient(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*ClientResponse, error) {
	out := new(ClientResponse)
	err := grpc.Invoke(ctx, "/domain.Goway/GetClient", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gowayClient) GetClientByCode(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*ClientResponse, error) {
	out := new(ClientResponse)
	err := grpc.Invoke(ctx, "/domain.Goway/GetClientByCode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gowayClient) UpdateClient(ctx context.Context, in *ClientUpdateRequest, opts ...grpc.CallOption) (*ClientResponse, error) {
	out := new(ClientResponse)
	err := grpc.Invoke(ctx, "/domain.Goway/UpdateClient", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gowayClient) DeleteClient(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := grpc.Invoke(ctx, "/domain.Goway/DeleteClient", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gowayClient) CreateClient(ctx context.Context, in *ClientCreateRequest, opts ...grpc.CallOption) (*ClientResponse, error) {
	out := new(ClientResponse)
	err := grpc.Invoke(ctx, "/domain.Goway/CreateClient", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gowayClient) CreateClientRoute(ctx context.Context, in *ClientCreateRouteRequest, opts ...grpc.CallOption) (*RouteResponse, error) {
	out := new(RouteResponse)
	err := grpc.Invoke(ctx, "/domain.Goway/CreateClientRoute", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gowayClient) CreateClientInject(ctx context.Context, in *ClientCreateInjectRequest, opts ...grpc.CallOption) (*InjectResponse, error) {
	out := new(InjectResponse)
	err := grpc.Invoke(ctx, "/domain.Goway/CreateClientInject", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gowayClient) GetRoutes(ctx context.Context, in *RoutesRequest, opts ...grpc.CallOption) (*RoutesResponse, error) {
	out := new(RoutesResponse)
	err := grpc.Invoke(ctx, "/domain.Goway/GetRoutes", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gowayClient) GetRoute(ctx context.Context, in *RouteRequest, opts ...grpc.CallOption) (*RouteResponse, error) {
	out := new(RouteResponse)
	err := grpc.Invoke(ctx, "/domain.Goway/GetRoute", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gowayClient) GetRouteByCode(ctx context.Context, in *RouteRequest, opts ...grpc.CallOption) (*RouteResponse, error) {
	out := new(RouteResponse)
	err := grpc.Invoke(ctx, "/domain.Goway/GetRouteByCode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gowayClient) UpdateRoute(ctx context.Context, in *RouteUpdateRequest, opts ...grpc.CallOption) (*RouteResponse, error) {
	out := new(RouteResponse)
	err := grpc.Invoke(ctx, "/domain.Goway/UpdateRoute", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gowayClient) DeleteRoute(ctx context.Context, in *RouteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := grpc.Invoke(ctx, "/domain.Goway/DeleteRoute", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gowayClient) CreateRouteInject(ctx context.Context, in *RouteCreateInjectRequest, opts ...grpc.CallOption) (*InjectResponse, error) {
	out := new(InjectResponse)
	err := grpc.Invoke(ctx, "/domain.Goway/CreateRouteInject", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gowayClient) GetInjects(ctx context.Context, in *InjectsRequest, opts ...grpc.CallOption) (*InjectsResponse, error) {
	out := new(InjectsResponse)
	err := grpc.Invoke(ctx, "/domain.Goway/GetInjects", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gowayClient) GetInject(ctx context.Context, in *InjectRequest, opts ...grpc.CallOption) (*InjectResponse, error) {
	out := new(InjectResponse)
	err := grpc.Invoke(ctx, "/domain.Goway/GetInject", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gowayClient) GetInjectByCode(ctx context.Context, in *InjectRequest, opts ...grpc.CallOption) (*InjectResponse, error) {
	out := new(InjectResponse)
	err := grpc.Invoke(ctx, "/domain.Goway/GetInjectByCode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gowayClient) UpdateInject(ctx context.Context, in *InjectUpdateRequest, opts ...grpc.CallOption) (*InjectResponse, error) {
	out := new(InjectResponse)
	err := grpc.Invoke(ctx, "/domain.Goway/UpdateInject", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gowayClient) DeleteInject(ctx context.Context, in *InjectRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := grpc.Invoke(ctx, "/domain.Goway/DeleteInject", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Goway service

type GowayServer interface {
	Version(context.Context, *VersionRequest) (*VersionResponse, error)
	GetProducts(context.Context, *ProductsRequest) (*ProductsResponse, error)
	GetProduct(context.Context, *ProductRequest) (*ProductResponse, error)
	GetProductByCode(context.Context, *ProductRequest) (*ProductResponse, error)
	UpdateProduct(context.Context, *ProductUpdateRequest) (*ProductResponse, error)
	DeleteProduct(context.Context, *ProductRequest) (*DeleteResponse, error)
	CreateProduct(context.Context, *ProductCreateRequest) (*ProductResponse, error)
	CreateProductRoute(context.Context, *ProductCreateRouteRequest) (*RouteResponse, error)
	GetClients(context.Context, *ClientsRequest) (*ClientsResponse, error)
	GetClient(context.Context, *ClientRequest) (*ClientResponse, error)
	GetClientByCode(context.Context, *ClientRequest) (*ClientResponse, error)
	UpdateClient(context.Context, *ClientUpdateRequest) (*ClientResponse, error)
	DeleteClient(context.Context, *ClientRequest) (*DeleteResponse, error)
	CreateClient(context.Context, *ClientCreateRequest) (*ClientResponse, error)
	CreateClientRoute(context.Context, *ClientCreateRouteRequest) (*RouteResponse, error)
	CreateClientInject(context.Context, *ClientCreateInjectRequest) (*InjectResponse, error)
	GetRoutes(context.Context, *RoutesRequest) (*RoutesResponse, error)
	GetRoute(context.Context, *RouteRequest) (*RouteResponse, error)
	GetRouteByCode(context.Context, *RouteRequest) (*RouteResponse, error)
	UpdateRoute(context.Context, *RouteUpdateRequest) (*RouteResponse, error)
	DeleteRoute(context.Context, *RouteRequest) (*DeleteResponse, error)
	CreateRouteInject(context.Context, *RouteCreateInjectRequest) (*InjectResponse, error)
	GetInjects(context.Context, *InjectsRequest) (*InjectsResponse, error)
	GetInject(context.Context, *InjectRequest) (*InjectResponse, error)
	GetInjectByCode(context.Context, *InjectRequest) (*InjectResponse, error)
	UpdateInject(context.Context, *InjectUpdateRequest) (*InjectResponse, error)
	DeleteInject(context.Context, *InjectRequest) (*DeleteResponse, error)
}

func RegisterGowayServer(s *grpc.Server, srv GowayServer) {
	s.RegisterService(&_Goway_serviceDesc, srv)
}

func _Goway_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GowayServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.Goway/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GowayServer).Version(ctx, req.(*VersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goway_GetProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GowayServer).GetProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.Goway/GetProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GowayServer).GetProducts(ctx, req.(*ProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goway_GetProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GowayServer).GetProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.Goway/GetProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GowayServer).GetProduct(ctx, req.(*ProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goway_GetProductByCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GowayServer).GetProductByCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.Goway/GetProductByCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GowayServer).GetProductByCode(ctx, req.(*ProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goway_UpdateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GowayServer).UpdateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.Goway/UpdateProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GowayServer).UpdateProduct(ctx, req.(*ProductUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goway_DeleteProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GowayServer).DeleteProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.Goway/DeleteProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GowayServer).DeleteProduct(ctx, req.(*ProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goway_CreateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GowayServer).CreateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.Goway/CreateProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GowayServer).CreateProduct(ctx, req.(*ProductCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goway_CreateProductRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductCreateRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GowayServer).CreateProductRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.Goway/CreateProductRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GowayServer).CreateProductRoute(ctx, req.(*ProductCreateRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goway_GetClients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GowayServer).GetClients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.Goway/GetClients",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GowayServer).GetClients(ctx, req.(*ClientsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goway_GetClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GowayServer).GetClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.Goway/GetClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GowayServer).GetClient(ctx, req.(*ClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goway_GetClientByCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GowayServer).GetClientByCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.Goway/GetClientByCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GowayServer).GetClientByCode(ctx, req.(*ClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goway_UpdateClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GowayServer).UpdateClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.Goway/UpdateClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GowayServer).UpdateClient(ctx, req.(*ClientUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goway_DeleteClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GowayServer).DeleteClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.Goway/DeleteClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GowayServer).DeleteClient(ctx, req.(*ClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goway_CreateClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GowayServer).CreateClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.Goway/CreateClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GowayServer).CreateClient(ctx, req.(*ClientCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goway_CreateClientRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientCreateRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GowayServer).CreateClientRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.Goway/CreateClientRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GowayServer).CreateClientRoute(ctx, req.(*ClientCreateRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goway_CreateClientInject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientCreateInjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GowayServer).CreateClientInject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.Goway/CreateClientInject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GowayServer).CreateClientInject(ctx, req.(*ClientCreateInjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goway_GetRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoutesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GowayServer).GetRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.Goway/GetRoutes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GowayServer).GetRoutes(ctx, req.(*RoutesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goway_GetRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GowayServer).GetRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.Goway/GetRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GowayServer).GetRoute(ctx, req.(*RouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goway_GetRouteByCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GowayServer).GetRouteByCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.Goway/GetRouteByCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GowayServer).GetRouteByCode(ctx, req.(*RouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goway_UpdateRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouteUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GowayServer).UpdateRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.Goway/UpdateRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GowayServer).UpdateRoute(ctx, req.(*RouteUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goway_DeleteRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GowayServer).DeleteRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.Goway/DeleteRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GowayServer).DeleteRoute(ctx, req.(*RouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goway_CreateRouteInject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouteCreateInjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GowayServer).CreateRouteInject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.Goway/CreateRouteInject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GowayServer).CreateRouteInject(ctx, req.(*RouteCreateInjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goway_GetInjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GowayServer).GetInjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.Goway/GetInjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GowayServer).GetInjects(ctx, req.(*InjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goway_GetInject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GowayServer).GetInject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.Goway/GetInject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GowayServer).GetInject(ctx, req.(*InjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goway_GetInjectByCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GowayServer).GetInjectByCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.Goway/GetInjectByCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GowayServer).GetInjectByCode(ctx, req.(*InjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goway_UpdateInject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InjectUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GowayServer).UpdateInject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.Goway/UpdateInject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GowayServer).UpdateInject(ctx, req.(*InjectUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goway_DeleteInject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GowayServer).DeleteInject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.Goway/DeleteInject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GowayServer).DeleteInject(ctx, req.(*InjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Goway_serviceDesc = grpc.ServiceDesc{
	ServiceName: "domain.Goway",
	HandlerType: (*GowayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _Goway_Version_Handler,
		},
		{
			MethodName: "GetProducts",
			Handler:    _Goway_GetProducts_Handler,
		},
		{
			MethodName: "GetProduct",
			Handler:    _Goway_GetProduct_Handler,
		},
		{
			MethodName: "GetProductByCode",
			Handler:    _Goway_GetProductByCode_Handler,
		},
		{
			MethodName: "UpdateProduct",
			Handler:    _Goway_UpdateProduct_Handler,
		},
		{
			MethodName: "DeleteProduct",
			Handler:    _Goway_DeleteProduct_Handler,
		},
		{
			MethodName: "CreateProduct",
			Handler:    _Goway_CreateProduct_Handler,
		},
		{
			MethodName: "CreateProductRoute",
			Handler:    _Goway_CreateProductRoute_Handler,
		},
		{
			MethodName: "GetClients",
			Handler:    _Goway_GetClients_Handler,
		},
		{
			MethodName: "GetClient",
			Handler:    _Goway_GetClient_Handler,
		},
		{
			MethodName: "GetClientByCode",
			Handler:    _Goway_GetClientByCode_Handler,
		},
		{
			MethodName: "UpdateClient",
			Handler:    _Goway_UpdateClient_Handler,
		},
		{
			MethodName: "DeleteClient",
			Handler:    _Goway_DeleteClient_Handler,
		},
		{
			MethodName: "CreateClient",
			Handler:    _Goway_CreateClient_Handler,
		},
		{
			MethodName: "CreateClientRoute",
			Handler:    _Goway_CreateClientRoute_Handler,
		},
		{
			MethodName: "CreateClientInject",
			Handler:    _Goway_CreateClientInject_Handler,
		},
		{
			MethodName: "GetRoutes",
			Handler:    _Goway_GetRoutes_Handler,
		},
		{
			MethodName: "GetRoute",
			Handler:    _Goway_GetRoute_Handler,
		},
		{
			MethodName: "GetRouteByCode",
			Handler:    _Goway_GetRouteByCode_Handler,
		},
		{
			MethodName: "UpdateRoute",
			Handler:    _Goway_UpdateRoute_Handler,
		},
		{
			MethodName: "DeleteRoute",
			Handler:    _Goway_DeleteRoute_Handler,
		},
		{
			MethodName: "CreateRouteInject",
			Handler:    _Goway_CreateRouteInject_Handler,
		},
		{
			MethodName: "GetInjects",
			Handler:    _Goway_GetInjects_Handler,
		},
		{
			MethodName: "GetInject",
			Handler:    _Goway_GetInject_Handler,
		},
		{
			MethodName: "GetInjectByCode",
			Handler:    _Goway_GetInjectByCode_Handler,
		},
		{
			MethodName: "UpdateInject",
			Handler:    _Goway_UpdateInject_Handler,
		},
		{
			MethodName: "DeleteInject",
			Handler:    _Goway_DeleteInject_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "domain/models.proto",
}

func init() { proto.RegisterFile("domain/models.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1338 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xb4, 0x58, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0x86, 0xa4, 0x48, 0xb2, 0x46, 0xbf, 0x5e, 0x5b, 0x36, 0x2d, 0x1b, 0x85, 0x42, 0xa4, 0x8e,
	0x6d, 0x34, 0x36, 0x92, 0xa2, 0x97, 0xa4, 0x3f, 0x49, 0x6c, 0xc0, 0xf0, 0xa1, 0x85, 0xab, 0x26,
	0x2d, 0x1c, 0x34, 0x68, 0x68, 0x73, 0x61, 0xb3, 0xa0, 0x49, 0x85, 0xa4, 0x14, 0xf8, 0xda, 0x5b,
	0xcf, 0x3d, 0xf4, 0xb9, 0x8a, 0xbe, 0x42, 0x1f, 0xa1, 0x0f, 0x50, 0xec, 0xce, 0x2e, 0x97, 0x4b,
	0x52, 0x12, 0x05, 0x34, 0x37, 0xee, 0x70, 0xe6, 0x9b, 0x9f, 0xfd, 0x66, 0x38, 0x12, 0xac, 0xd9,
	0xfe, 0xad, 0xe5, 0x78, 0x47, 0xb7, 0xbe, 0x4d, 0xdd, 0xf0, 0x70, 0x1c, 0xf8, 0x91, 0x4f, 0x6a,
	0x28, 0x1c, 0xec, 0x5c, 0xfb, 0xfe, 0xb5, 0x4b, 0x8f, 0xac, 0xb1, 0x73, 0x64, 0x79, 0x9e, 0x1f,
	0x59, 0x91, 0xe3, 0x7b, 0x42, 0xcb, 0xec, 0x41, 0xe7, 0x47, 0x1a, 0x84, 0x8e, 0xef, 0x8d, 0xe8,
	0xfb, 0x09, 0x0d, 0x23, 0xf3, 0x21, 0x74, 0x63, 0x49, 0x38, 0xf6, 0xbd, 0x90, 0x92, 0x75, 0xa8,
	0x4e, 0x2d, 0x77, 0x42, 0x8d, 0xd2, 0xb0, 0xb4, 0xd7, 0x18, 0xe1, 0xc1, 0xdc, 0x85, 0xce, 0x09,
	0x75, 0x69, 0x44, 0xf3, 0xf5, 0x56, 0xa4, 0xde, 0x2a, 0x74, 0xcf, 0x03, 0xdf, 0x9e, 0x5c, 0x45,
	0xa1, 0xf4, 0xb1, 0x0b, 0x1d, 0x21, 0x12, 0x92, 0x19, 0x2e, 0x5e, 0xc1, 0xba, 0xd0, 0x7b, 0x3d,
	0xb6, 0x2d, 0xe6, 0x09, 0xb5, 0x3b, 0x50, 0x76, 0x6c, 0xa1, 0x5a, 0x76, 0x6c, 0xf2, 0x19, 0xd4,
	0xc7, 0xa8, 0x67, 0x94, 0x87, 0xa5, 0xbd, 0xe6, 0x13, 0x72, 0x88, 0xd9, 0x1f, 0x0a, 0xf3, 0x5f,
	0xa6, 0x8f, 0x47, 0x52, 0xc5, 0x3c, 0x89, 0x51, 0x8f, 0x03, 0x9a, 0x40, 0x4d, 0xa0, 0x94, 0x16,
	0xa3, 0xbc, 0x82, 0x2d, 0x1d, 0xc5, 0x9f, 0xcc, 0x0e, 0xf0, 0x21, 0x54, 0x03, 0xf6, 0x5e, 0x84,
	0xb7, 0x2a, 0x81, 0xb9, 0x51, 0xc8, 0x70, 0xf1, 0xbd, 0xf9, 0x55, 0x5c, 0xac, 0xb8, 0xaa, 0x07,
	0x50, 0x0b, 0x68, 0x38, 0x71, 0xe7, 0x45, 0x25, 0x34, 0xcc, 0xaf, 0xa1, 0xa7, 0x6a, 0x9d, 0x63,
	0x5f, 0x59, 0x60, 0xff, 0x7b, 0x09, 0x40, 0x89, 0x33, 0x69, 0x10, 0xb8, 0x77, 0xe5, 0xdb, 0x98,
	0x45, 0x63, 0xc4, 0x9f, 0x99, 0xcc, 0xb3, 0x6e, 0xa9, 0x51, 0x41, 0x19, 0x7b, 0x26, 0x06, 0xd4,
	0xa7, 0xc8, 0x21, 0xe3, 0x1e, 0x17, 0xcb, 0x23, 0xd9, 0x87, 0x1a, 0x4f, 0x34, 0x34, 0xaa, 0x3c,
	0x98, 0x9c, 0x4a, 0x08, 0x05, 0x46, 0xcd, 0x63, 0xd7, 0xa1, 0x9e, 0xa2, 0xcd, 0xa7, 0xd0, 0x46,
	0xc9, 0x7c, 0xd6, 0x9c, 0xc3, 0x1a, 0xaa, 0xcd, 0x27, 0xcd, 0x3e, 0xd4, 0xae, 0xb8, 0x5a, 0xfa,
	0x52, 0xd0, 0x98, 0x87, 0x82, 0x0a, 0xe6, 0x73, 0x89, 0xa8, 0x13, 0x46, 0x21, 0x94, 0x16, 0x21,
	0xfc, 0x00, 0x86, 0x86, 0xf0, 0xbf, 0x90, 0xe5, 0x0d, 0x6c, 0x25, 0x41, 0xcf, 0xbc, 0x5f, 0xa9,
	0xea, 0xa8, 0x34, 0xea, 0x23, 0xa8, 0x39, 0x5c, 0x41, 0xc0, 0xf6, 0x25, 0x2c, 0x9a, 0x9d, 0x58,
	0x91, 0xc5, 0x03, 0x46, 0x25, 0xf3, 0x99, 0xac, 0x7e, 0xcc, 0xa3, 0xfd, 0x14, 0x0f, 0xf3, 0xb2,
	0x15, 0x34, 0xfa, 0x12, 0xba, 0xf1, 0xd5, 0xe5, 0x58, 0x57, 0xe6, 0x5b, 0xff, 0x55, 0x86, 0x46,
	0x2c, 0x2d, 0xc4, 0x41, 0x03, 0xea, 0xd6, 0xd8, 0x39, 0xb7, 0xa2, 0x1b, 0x41, 0x43, 0x79, 0x64,
	0x6f, 0x64, 0x4f, 0x0b, 0x26, 0x8a, 0x23, 0xd9, 0x85, 0x8e, 0x78, 0x14, 0xe3, 0xce, 0xa8, 0x72,
	0x85, 0x94, 0x94, 0x6c, 0xc4, 0x97, 0x5c, 0xe3, 0xef, 0xc5, 0x89, 0x3c, 0x80, 0x76, 0x40, 0x6f,
	0xfd, 0x29, 0x7d, 0x21, 0x3c, 0xd7, 0xf9, 0xd0, 0xd3, 0x85, 0xc9, 0x4e, 0x58, 0xd1, 0x3b, 0xe1,
	0x05, 0xf4, 0xae, 0x5d, 0xff, 0xd2, 0x72, 0x55, 0xfd, 0x8d, 0x06, 0x2f, 0xcd, 0x8c, 0x9b, 0xc9,
	0xa8, 0x27, 0x9a, 0x09, 0x16, 0x35, 0x53, 0x17, 0xda, 0x28, 0x94, 0xbd, 0xf4, 0x00, 0x5a, 0x1a,
	0x09, 0xf3, 0x5b, 0xe9, 0x5b, 0x20, 0x5c, 0x6b, 0x7e, 0x27, 0x15, 0x26, 0xec, 0x05, 0x18, 0x5c,
	0xf6, 0x11, 0xf8, 0xfa, 0x54, 0x24, 0xb8, 0x98, 0xae, 0xc9, 0xe2, 0x20, 0xe1, 0x9e, 0x41, 0x47,
	0x16, 0x67, 0x11, 0x5b, 0xb3, 0xc6, 0xff, 0x96, 0xa1, 0x11, 0x4b, 0x8b, 0x4e, 0xcc, 0x29, 0x0d,
	0x2e, 0xe5, 0xc4, 0x64, 0xcf, 0xe4, 0x13, 0x00, 0xd7, 0x09, 0x23, 0xea, 0x71, 0x2a, 0x21, 0x55,
	0x13, 0x12, 0x32, 0x84, 0x66, 0x48, 0x83, 0xa9, 0x73, 0x45, 0xbf, 0x63, 0xc3, 0x16, 0xa9, 0x9a,
	0x14, 0x91, 0x01, 0xac, 0xdc, 0x58, 0x9e, 0xed, 0xd2, 0x20, 0x34, 0x6a, 0xc3, 0xca, 0x5e, 0x63,
	0x14, 0x9f, 0xd9, 0xe5, 0x06, 0xbe, 0x4b, 0x43, 0xa3, 0xce, 0x5f, 0xe0, 0x81, 0xc5, 0x11, 0x59,
	0xd7, 0xa1, 0xb1, 0xc2, 0x85, 0xfc, 0x99, 0x7c, 0x01, 0xe0, 0x14, 0xe4, 0x63, 0x42, 0x91, 0x1c,
	0x40, 0x0f, 0x4f, 0xa7, 0x9c, 0xa3, 0xdc, 0x18, 0x78, 0x3f, 0x64, 0xe4, 0x2c, 0x18, 0x2b, 0x0c,
	0x69, 0x64, 0x34, 0x91, 0x69, 0xfc, 0xc0, 0x5b, 0x98, 0x3d, 0x9c, 0xd9, 0x46, 0x4b, 0xb4, 0x30,
	0x1e, 0xb9, 0xbe, 0xeb, 0x58, 0xa1, 0xd1, 0x16, 0xfa, 0xec, 0xc0, 0xbe, 0x0e, 0x18, 0x4e, 0xf2,
	0xeb, 0xa0, 0x33, 0x6a, 0xd6, 0x4e, 0xb1, 0x86, 0x6a, 0xf3, 0x39, 0xbd, 0x24, 0xfd, 0xbe, 0x91,
	0xe1, 0xc4, 0x14, 0x7a, 0x94, 0xe2, 0xdf, 0x2c, 0x00, 0x41, 0xa3, 0xe7, 0xd0, 0x8d, 0xf3, 0xc9,
	0x41, 0xa8, 0x2c, 0x46, 0x98, 0xc8, 0xfc, 0xc5, 0x8b, 0x42, 0x5c, 0x8c, 0x6b, 0x54, 0x49, 0xd4,
	0x88, 0x49, 0x3f, 0xdc, 0xd0, 0x80, 0x0a, 0x22, 0xe2, 0x81, 0x49, 0xfd, 0xc0, 0xa6, 0x01, 0x67,
	0x5f, 0x75, 0x84, 0x87, 0x27, 0x7f, 0xae, 0x43, 0xf5, 0xd4, 0xff, 0x60, 0xdd, 0x91, 0x11, 0xd4,
	0xe3, 0xa1, 0x29, 0x43, 0xd5, 0x97, 0xcb, 0xc1, 0x66, 0x46, 0x8e, 0xb9, 0x9a, 0x1b, 0xbf, 0xfd,
	0xfd, 0xcf, 0x1f, 0xe5, 0x9e, 0xd9, 0x3c, 0x9a, 0x3e, 0x3e, 0x12, 0x23, 0xf2, 0x69, 0xe9, 0x80,
	0x5c, 0x40, 0xf3, 0x94, 0x46, 0x72, 0xa7, 0x21, 0x9b, 0xa9, 0xdd, 0x45, 0x5e, 0xfe, 0xc0, 0xc8,
	0xbe, 0x10, 0xc8, 0x9b, 0x1c, 0x79, 0xd5, 0x6c, 0x31, 0x64, 0x31, 0xdb, 0x43, 0x84, 0x06, 0x05,
	0xad, 0x22, 0xd6, 0x17, 0xd3, 0xc1, 0x66, 0x46, 0x2e, 0x70, 0x07, 0x1c, 0x77, 0xdd, 0xec, 0x26,
	0x70, 0x5f, 0xde, 0x9d, 0xd9, 0x0c, 0xda, 0x82, 0x9e, 0x82, 0x7e, 0x79, 0x77, 0xcc, 0x2a, 0xbd,
	0xb4, 0x83, 0x1d, 0xee, 0x60, 0xc3, 0x5c, 0xd5, 0x1c, 0x30, 0x2c, 0xe6, 0xc2, 0x86, 0x36, 0x12,
	0x58, 0x26, 0xb0, 0x93, 0xc2, 0xd1, 0xe8, 0xbd, 0x9c, 0x17, 0x34, 0x65, 0x5e, 0xde, 0x42, 0x1b,
	0x77, 0xfc, 0x45, 0x65, 0x8a, 0xe5, 0xfa, 0x4f, 0x82, 0x5c, 0x78, 0x54, 0x11, 0x49, 0xe0, 0xa7,
	0x60, 0x56, 0x12, 0xda, 0xbe, 0xb5, 0x5c, 0x12, 0x68, 0xca, 0xbc, 0xbc, 0x07, 0xa2, 0x79, 0xe1,
	0xd3, 0x9a, 0xdc, 0xcf, 0x77, 0x95, 0xf8, 0x26, 0x0e, 0xfa, 0xda, 0xd4, 0x8f, 0xbd, 0xdd, 0xe7,
	0xde, 0xb6, 0xcd, 0x8d, 0x8c, 0x37, 0xae, 0xc7, 0x5c, 0xbe, 0xe6, 0xdc, 0x12, 0x3b, 0x90, 0x2a,
	0x9a, 0xbe, 0xcf, 0xaa, 0x7c, 0x52, 0xcb, 0x92, 0xde, 0x0d, 0xb8, 0x6f, 0x84, 0x08, 0xdb, 0x88,
	0x61, 0x49, 0x5f, 0xb7, 0xce, 0xdc, 0x84, 0xbe, 0xbe, 0x99, 0x5b, 0x1c, 0x73, 0xcd, 0xec, 0x28,
	0x4c, 0x49, 0xd7, 0xb7, 0xd0, 0x8d, 0x61, 0x05, 0x5b, 0x97, 0x04, 0xdf, 0xe6, 0xe0, 0x7d, 0xb3,
	0x97, 0x04, 0x97, 0x54, 0x7d, 0x07, 0x2d, 0x64, 0x94, 0x08, 0x7c, 0x5b, 0x07, 0xd1, 0x89, 0xba,
	0x84, 0x07, 0x45, 0xd3, 0x37, 0xd0, 0x42, 0x52, 0x15, 0x2c, 0x4d, 0x8a, 0xa4, 0x39, 0xd8, 0x8a,
	0xa3, 0xef, 0xa0, 0x85, 0x97, 0x9b, 0x1f, 0xbd, 0xce, 0xd0, 0x25, 0xa2, 0x57, 0xfc, 0xf4, 0x60,
	0x35, 0xe9, 0x01, 0xe9, 0x39, 0xcc, 0x75, 0x53, 0x80, 0x9d, 0x43, 0xee, 0x6a, 0x60, 0xf6, 0xd3,
	0xae, 0x62, 0x72, 0x06, 0xb2, 0x1f, 0x10, 0x1a, 0x3f, 0x1a, 0xaa, 0x1f, 0x66, 0xfe, 0xa4, 0x50,
	0xd9, 0xe9, 0x9f, 0x3a, 0xbd, 0x21, 0xae, 0x32, 0xe6, 0xcc, 0xe7, 0xf7, 0x9c, 0xb9, 0xb8, 0x27,
	0x11, 0x3d, 0xf2, 0x30, 0x03, 0xaf, 0x2f, 0x63, 0x66, 0x9f, 0xc3, 0x77, 0x4d, 0x60, 0xf0, 0xb8,
	0xcf, 0x22, 0xe4, 0x8a, 0x84, 0x24, 0xeb, 0xa9, 0x5a, 0xcc, 0xad, 0x90, 0xc1, 0xf1, 0x88, 0xd9,
	0x8e, 0xf1, 0x64, 0x23, 0x5c, 0x40, 0x47, 0x42, 0x8a, 0x3e, 0x58, 0x0a, 0x58, 0xfb, 0x24, 0x04,
	0x0a, 0x85, 0x41, 0xff, 0x0c, 0x4d, 0x41, 0x74, 0x1e, 0xf0, 0x40, 0x43, 0xd0, 0x5b, 0xa0, 0x30,
	0xba, 0x6a, 0x80, 0x9f, 0xa0, 0x29, 0x38, 0x3d, 0xa7, 0x1c, 0xb3, 0xe8, 0x9f, 0x05, 0x56, 0xec,
	0xf7, 0x25, 0x37, 0x39, 0x92, 0xa0, 0xca, 0x50, 0x83, 0x5f, 0x86, 0x29, 0x1a, 0x39, 0x83, 0xb4,
	0xb5, 0x9a, 0x9c, 0x62, 0x15, 0x22, 0x29, 0x9c, 0xec, 0xe4, 0x4c, 0xed, 0x4c, 0xfa, 0xe4, 0xc4,
	0xdd, 0x2c, 0x31, 0x39, 0x45, 0xfc, 0xfd, 0x74, 0x74, 0xf3, 0x83, 0xd6, 0x26, 0x27, 0x62, 0xea,
	0x93, 0xf3, 0x4c, 0xc8, 0xf4, 0xc9, 0x59, 0x0c, 0x5c, 0x9b, 0x0c, 0x4e, 0x02, 0x48, 0x9b, 0x9c,
	0x22, 0xf0, 0x6d, 0x1d, 0x64, 0xc6, 0xe4, 0x5c, 0xec, 0x21, 0x67, 0x72, 0x16, 0x2c, 0xcd, 0xbc,
	0xc9, 0x29, 0x7e, 0x0f, 0x48, 0xee, 0x5c, 0xd6, 0xf8, 0x5f, 0x8c, 0x9f, 0xff, 0x17, 0x00, 0x00,
	0xff, 0xff, 0xd3, 0xc7, 0xa4, 0x43, 0x9f, 0x14, 0x00, 0x00,
}
